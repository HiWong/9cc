
Expression
==========

1. Expression that can be lvalues:

        Expression          Additional requirements
        --------------------------------------------
        name                name must be a variable
        e[k]                none
        (e)                 e must be an lvalue
        e.name              e must be an lvalue
        e->name             none
        *e                  none
        string-constant     none
        --------------------------------------------

2. Operators requiring lvalue operands:

        Operator            Requirement
        ---------------------------------------------------------------
        & (unary)           operand must be an lvalue or function name
        ++ --               operand must be an lvalue (postfix, prefix)
        = += -= *= /= %=    left operand must be an lvalue
        <<= >>= &= ^= |=
        ---------------------------------------------------------------

3. Result

        Expression      Result type             Result tree     lvalue          Requirements
        ---------------------------------------------------------------------------------------
        comma           void                    RIGHT           No
                        pointer
                        arith
                        struct/union
        ---------------------------------------------------------------------------------------
        assign          pointer                 ASGN            No
                        arith
                        struct/union
        ---------------------------------------------------------------------------------------
        cond            void                    COND            No              COND(cond, RIGHT(then, els))
                        pointer                                                 COND(cond, RIGHT(ASGN(t, then),
                        arith                                                                    ASGN(t, els)))
                        struct/union
        ---------------------------------------------------------------------------------------

binary:

        Expression      Result type             Result tree     lvalue          Requirements
        ---------------------------------------------------------------------------------------
        logical-or      integer                 OR              No              scalar || scalar
        logical-and     integer                 AND             No              scalar && scalar

        *               arith                   MUL             No              arith * arith
        /               arith                   DIV             No              arith / arith
        
        %               integer                 MOD             No              integer % integer
        <<              integer                 SHL             No              integer << integer
        >>              integer                 SHR             No              integer >> integer
        &               integer                 BAND            No              integer & integer
        ^               integer                 XOR             No              integer ^ integer
        |               integer                 BOR             No              integer | integer
        
        +               arith                   ADD             No              arith + arith
                        pointer                 ADD                             pointer + integer
                                                                                integer + pointer
                                                                
        -               arith                   SUB             No              arith - arith
                        pointer                 SUB                             pointer - integer
                        integer                 SUB                             pointer - pointer
                        
        >               integer                 GT              No              arith > arith
                                                                                pointer > pointer
                                                                
        <               integer                 LT              No              arith < arith
                                                                                pointer < pointer
                                                                
        >=              integer                 GE              No              arith >= arith
                                                                                pointer >= pointer
                                                                
        <=              integer                 LE              No              arith <= arith
                                                                                pointer <= pointer
                                                                
        ==              integer                 EQ              No              arith == arith
                                                                                pointer == pointer
                                                                                pointer == 0
                                                                
        !=              integer                 NE              No              arith != arith
                                                                                pointer != pointer
                                                                                pointer != 0
        ---------------------------------------------------------------------------------------


cast:

        Expression      Result type             Result tree     lvalue          Requirements
        ---------------------------------------------------------------------------------------
        cast            void                    CV??            No
                        pointer                 RIGHT
                        arith
        ---------------------------------------------------------------------------------------


unary:

        Expression      Result type             Result tree     lvalue          Requirements
        ---------------------------------------------------------------------------------------
        sizeof          integer                 CNST            No

        +               arith                   RIGHT,          No
                                                !!!
                                                
        -               arith                   NEG             No
        
        !               arith                   COND            No              COND(e, RIGHT(ASGN(t, CNST0)
                        pointer                                                               ASGN(t, CNST1)))  
                        
        ~               integer                 BNOT            No
        
        &               pointer                 ???             No
                                                ADDR
                                                
        *               void                    INDIR+???,      Yes (except function type)
                        pointer                 ADDR
                        arith
                        struct/union
                        array
                        function
                        
        ++ (prefix)     arith                   ASGN            No              ASGN(l, ADD(l, CNST1))
                        pointer                                 
                        
        -- (prefix)     arith                   ASGN            No
                        pointer                                 
        ---------------------------------------------------------------------------------------

postfix:

        Expression          Result type             Result tree     lvalue      Requirements
        ---------------------------------------------------------------------------------------
        ++ (postfix)        arith                   RIGHT           No          RIGHT(RIGHT(l,
                            pointer                                                         ASGN(l, ADD(l, CNST1)))
                                                                                      l)
        -- (postfix)        arith                   RIGHT           No
                            pointer                                   

        e.id                pointer                 INDIR+ADD,      Yes if e is an lvaue
                            arith                   BFIELD,
                            struct/union            RIGHT
                            array
                        
        e->id               pointer                 INDIR+ADD,      Yes
                            arith                   BFIELD
                            struct/union
                            array
                        
        funcall             void                    RIGHT+CALL      No
                            pointer
                            arith
                            struct/union
                        
        subscript           pointer                 INDIR+ADD       Yes
                            arith
                            struct/union
                            array
                        
        compound-literal    pointer                 INDIR+ADDR      Yes
                            arith
                            struct/union
                            array
        ---------------------------------------------------------------------------------------

primary:

        Expression          Result type             Result tree     lvalue       Requirements                          
        ---------------------------------------------------------------------------------------
        identifier          pointer                 INDIR+ADDR      Yes
                            arith                   INDIR+ADDR      Yes
                            struct/union            INDIR+ADDR      Yes
                            array                   ADDR            Yes
                            function                ADDR            No
                        
        enum-id             integer                 CNST            No

        integer-constant    integer                 CNST            No

        float-constant      floating                CNST            No

        string-literal      array                   ADDR            Yes

        (expression)
        ---------------------------------------------------------------------------------------


COMMENT
========

operator: (uint16)

      High                         Low
        | zzzz | zzyy | yyyy | xxxx |

        zzzz-zz: op size, 1,2,4,8,16
        yy-yyyy: op kind
        xxxx: op type, I,U,F,P,S


APPENDIX
=========

x86 address model:

    disp(base, index, scale)

    disp:  integer constant
    base:  register
    index: register
    scale: 1/2/4/8

c types:

  integral types:---____ arith types ___
  floating types:---                    ----- scalar types
  pointer types: -----------------------
  array types:   ---_____ aggregate types
  struct types:  ---
  union type:
  function type:
  void type:
