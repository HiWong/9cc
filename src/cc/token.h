// ASCII
// id    name       map
_a(TOK0, "000",     0)
_a(TOK1, "001",     0)
_a(TOK2, "002",     0)
_a(TOK3, "003",     0)
_a(TOK4, "004",     0)
_a(TOK5, "005",     0)
_a(TOK6, "006",     0)
_a(TOK7, "007",     0)
_a(TOK8, "010",     0)
_a(TOK9, "011",     BLANK)
_a(TOK10, "012",    NEWLINE)
_a(TOK11, "013",    BLANK)
_a(TOK12, "014",    BLANK)
_a(TOK13, "015",    BLANK)
_a(TOK14, "016",    0)
_a(TOK15, "017",    0)
_a(TOK16, "020",    0)
_a(TOK17, "021",    0)
_a(TOK18, "022",    0)
_a(TOK19, "023",    0)
_a(TOK20, "024",    0)
_a(TOK21, "025",    0)
_a(TOK22, "026",    0)
_a(TOK23, "027",    0)
_a(TOK24, "030",    0)
_a(TOK25, "031",    0)
_a(TOK26, "032",    0)
_a(TOK27, "033",    0)
_a(TOK28, "034",    0)
_a(TOK29, "035",    0)
_a(TOK30, "036",    0)
_a(TOK31, "037",    0)
_a(TOK32, " ",      BLANK)
_a(TOK33, "!",      OTHER)
_a(TOK34, "\"",     OTHER)
_a(TOK35, "#",      OTHER)
_a(TOK36, "$",      OTHER)
_a(TOK37, "%",      OTHER)
_a(TOK38, "&",      OTHER)
_a(TOK39, "'",      OTHER)
_a(TOK40, "(",      OTHER)
_a(TOK41, ")",      OTHER)
_a(TOK42, "*",      OTHER)
_a(TOK43, "+",      OTHER)
_a(TOK44, ",",      OTHER)
_a(TOK45, "-",      OTHER)
_a(TOK46, ".",      OTHER)
_a(TOK47, "/",      OTHER)
_a(TOK48, "0",      DIGIT)
_a(TOK49, "1",      DIGIT)
_a(TOK50, "2",      DIGIT)
_a(TOK51, "3",      DIGIT)
_a(TOK52, "4",      DIGIT)
_a(TOK53, "5",      DIGIT)
_a(TOK54, "6",      DIGIT)
_a(TOK55, "7",      DIGIT)
_a(TOK56, "8",      DIGIT)
_a(TOK57, "9",      DIGIT)
_a(TOK58, ":",      OTHER)
_a(TOK59, ";",      OTHER)
_a(TOK60, "<",      OTHER)
_a(TOK61, "=",      OTHER)
_a(TOK62, ">",      OTHER)
_a(TOK63, "?",      OTHER)
_a(TOK64, "@",      OTHER)
_a(TOK65, "A",      LETTER|HEX)
_a(TOK66, "B",      LETTER|HEX)
_a(TOK67, "C",      LETTER|HEX)
_a(TOK68, "D",      LETTER|HEX)
_a(TOK69, "E",      LETTER|HEX)
_a(TOK70, "F",      LETTER|HEX)
_a(TOK71, "G",      LETTER)
_a(TOK72, "H",      LETTER)
_a(TOK73, "I",      LETTER)
_a(TOK74, "J",      LETTER)
_a(TOK75, "K",      LETTER)
_a(TOK76, "L",      LETTER)
_a(TOK77, "M",      LETTER)
_a(TOK78, "N",      LETTER)
_a(TOK79, "O",      LETTER)
_a(TOK80, "P",      LETTER)
_a(TOK81, "Q",      LETTER)
_a(TOK82, "R",      LETTER)
_a(TOK83, "S",      LETTER)
_a(TOK84, "T",      LETTER)
_a(TOK85, "U",      LETTER)
_a(TOK86, "V",      LETTER)
_a(TOK87, "W",      LETTER)
_a(TOK88, "X",      LETTER)
_a(TOK89, "Y",      LETTER)
_a(TOK90, "Z",      LETTER)
_a(TOK91, "[",      OTHER)
_a(TOK92, "\\",     OTHER)
_a(TOK93, "]",      OTHER)
_a(TOK94, "^",      OTHER)
_a(TOK95, "_",      LETTER)
_a(TOK96, "`",      OTHER)
_a(TOK97, "a",      LETTER|HEX)
_a(TOK98, "b",      LETTER|HEX)
_a(TOK99, "c",      LETTER|HEX)
_a(TOK100, "d",     LETTER|HEX)
_a(TOK101, "e",     LETTER|HEX)
_a(TOK102, "f",     LETTER|HEX)
_a(TOK103, "g",     LETTER)
_a(TOK104, "h",     LETTER)
_a(TOK105, "i",     LETTER)
_a(TOK106, "j",     LETTER)
_a(TOK107, "k",     LETTER)
_a(TOK108, "l",     LETTER)
_a(TOK109, "m",     LETTER)
_a(TOK110, "n",     LETTER)
_a(TOK111, "o",     LETTER)
_a(TOK112, "p",     LETTER)
_a(TOK113, "q",     LETTER)
_a(TOK114, "r",     LETTER)
_a(TOK115, "s",     LETTER)
_a(TOK116, "t",     LETTER)
_a(TOK117, "u",     LETTER)
_a(TOK118, "v",     LETTER)
_a(TOK119, "w",     LETTER)
_a(TOK120, "x",     LETTER)
_a(TOK121, "y",     LETTER)
_a(TOK122, "z",     LETTER)
_a(TOK123, "{",     OTHER)
_a(TOK124, "|",     OTHER)
_a(TOK125, "}",     OTHER)
_a(TOK126, "~",     OTHER)
_a(TOK127, "0177",  OTHER)

// id           name           kind
_x(ID,          "identifier",  0,   256)
_t(ICONSTANT,   "ICONSTANT",   0)
_t(FCONSTANT,   "FCONSTANT",   0)
_t(SCONSTANT,   "SCONSTANT",   0)
_t(ELLIPSIS,    "...",         0)
// keywords		       
_t(AUTO,        "auto",        SCLASS_SPEC)
_t(_BOOL,       "_Bool",       TYPE_SPEC)
_t(BREAK,       "break",       0)
_t(CASE,        "case",        0)
_t(CHAR,        "char",        TYPE_SPEC)
_t(_COMPLEX,    "_Complex",    TYPE_SPEC)
_t(CONST,       "const",       TYPE_QUAL)
_t(CONTINUE,    "continue",    0)
_t(DEFAULT,     "default",     0)
_t(DO,          "do",          0)
_t(DOUBLE,      "double",      TYPE_SPEC)
_t(ELSE,        "else",        0)
_t(ENUM,        "enum",        TYPE_SPEC)
_t(EXTERN,      "extern",      SCLASS_SPEC)
_t(FLOAT,       "float",       TYPE_SPEC)
_t(FOR,         "for",         0)
_t(GOTO,        "goto",        0)
_t(IF,          "if",          0)
_t(_IMAGINARY,  "_Imaginary",  0)
_t(INLINE,      "inline",      FUNC_SPEC)
_t(INT,         "int",         TYPE_SPEC)
_t(LONG,        "long",        TYPE_SPEC)
_t(REGISTER,    "register",    SCLASS_SPEC)
_t(RESTRICT,    "restrict",    TYPE_QUAL)
_t(RETURN,      "return",      0)
_t(SHORT,       "short",       TYPE_SPEC)
_t(SIZEOF,      "sizeof",      0)
_t(STATIC,      "static",      SCLASS_SPEC)
_t(SIGNED,      "signed",      TYPE_SPEC)
_t(STRUCT,      "struct",      TYPE_SPEC)
_t(SWITCH,      "switch",      0)
_t(TYPEDEF,     "typedef",     SCLASS_SPEC)
_t(UNSIGNED,    "unsigned",    TYPE_SPEC)
_t(UNION,       "union",       TYPE_SPEC)
_t(VOID,        "void",        TYPE_SPEC)
_t(VOLATILE,    "volatile",    TYPE_QUAL)
_t(WHILE,       "while",       0)
// operators		       
_t(MULEQ,       "*=",          0)
_t(ADDEQ,       "+=",          0)
_t(MINUSEQ,     "-=",          0)
_t(DIVEQ,       "/=",          0)
_t(MODEQ,       "%=",          0)

_t(XOREQ,       "^=",          0)
_t(BANDEQ,      "&=",          0)
_t(BOREQ,       "|=",          0)

_t(LEQ,         "<=",          0)
_t(LSHIFTEQ,    "<<=",         0)
_t(LSHIFT,      "<<",          0)
_t(GEQ,         ">=",          0)
_t(RSHIFTEQ,    ">>=",         0)
_t(RSHIFT,      ">>",          0)

_t(INCR,        "++",          0)
_t(DECR,        "--",          0)
_t(DEREF,       "->",          0)
_t(EQ,          "==",          0)
_t(NEQ,         "!=",          0)

_t(AND,         "&&",          0)
_t(OR,          "||",          0)

// op			       
_t(ARRAY,       "array",       0)
_t(FUNCTION,    "function",    0)
_t(POINTER,     "pointer",     0)
//			       
_t(ADDR,        "addr",        0)
_t(CAST,        "cast",        0)

#undef _t
#undef _x
#undef _a
