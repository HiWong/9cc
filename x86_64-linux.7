%{
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <stdint.h>
#include "cc.h"

#define MAX_STRUCT_PARAM_SIZE  16

typedef struct tree TREE_TYPE;
#define LEFT_KID(p)  ((p)->kids[0])
#define RIGHT_KID(p)  ((p)->kids[1])
#define TREE_OP(p)  ((p)->op)
#define TREE_STATE(p)   ((p)->x.state)

#define burg(name)  burg_##name
%}

%term ADDRGP8=8259
%term ADDRPP8=8275
%term ADDRLP8=8291

%term INDIRI1=1137
%term INDIRI2=2161
%term INDIRI4=4209
%term INDIRI8=8305
%term INDIRU1=1138
%term INDIRU2=2162
%term INDIRU4=4210
%term INDIRU8=8306
%term INDIRF4=4211
%term INDIRF8=8307
%term INDIRF16=16499
%term INDIRP8=8308
%term INDIRS=117

%term ASGNI1=1153
%term ASGNI2=2177
%term ASGNI4=4225
%term ASGNI8=8321
%term ASGNU1=1154
%term ASGNU2=2178
%term ASGNU4=4226
%term ASGNU8=8322
%term ASGNF4=4227
%term ASGNF8=8323
%term ASGNF16=16515
%term ASGNP8=8324
%term ASGNS=133

%term ADDI4=4273
%term ADDI8=8369
%term ADDU4=4274
%term ADDU8=8370
%term ADDF4=4275
%term ADDF8=8371
%term ADDF16=16563
%term ADDP8=8372

%%
stmt: ASGNI4(reg, mem)          ""
reg: ADDI4(reg, mem)            ""
mem4: INDIRI4(addr)             ""
addr: ADDRLP8                   ""
%%

static void init(int argc, char *argv[])
{
}

static void finalize(void)
{
}

static void defvar(struct symbol *sym)
{
}

static void defun(struct symbol *sym)
{
}

struct interface *IR = &(struct interface) {
    // os/arch
    .os = "linux",
    .arch = "x86_64",
    // size  align  rank
    .boolmetrics = {1, 1, 10},
    .charmetrics = {1, 1, 20},
    .shortmetrics = {2, 2, 30},
    .wcharmetrics = {4, 4, 40},
    .intmetrics = {4, 4, 40},
    .longmetrics = {8, 8, 50},
    .longlongmetrics = {8, 8, 60},
    .floatmetrics = {4, 4, 70},
    .doublemetrics = {8, 8, 80},
    .longdoublemetrics = {8, 8, 90},
    .ptrmetrics = {8, 8, 0},
    .voidmetrics = {0, 1, 0},
    // func
    .init = init,
    .finalize = finalize,
    .defvar = defvar,
    .defun = defun,
    // xface
    .x = {
        .label = burg(label),
        .rule = burg(rule),
        .kids = burg(nts_kids),
        .rule_names = burg(rule_names),
        .nt_names = burg(nt_names),
        .templates = burg(rule_templates),
        .nts = burg(nts),
        .max_kids = burg(max_nts),
        .nts_count = burg(max_nt),
    },
};
