

X86_64 registers

64-bit  32-bit  16-bit  8-bit
rax     eax     ax      al,ah
rbx     ebx     bx      bl,bh
rcx     ecx     cx      cl,ch
rdx     edx     dx      dl,dh
rbp     ebp     bp
rsp     esp     sp
rsi     esi     si
rdi     edi     di
rip     eip     ip
r8~r15

Segment registers

cs,ds,es,fs,gs,ss


Integer Conversion

1. signed => signed

widden

int8 => int64: movsbq (Signed+Byte+Quad)
int8 => int32: movsbl (Signed+Byte+Long)
int8 => int16: movsbw (Signed+Byte+Word)

int16 => int64: movswq (Signed+Word+Quad)
int16 => int32: movswl (Signed+Word+Long)

int32 => int64: cltq (Convert+Long+To+Quad)

narrow

int64 => int32: movq, movl
int64 => int16: movq, movw
int64 => int8: movq, movb

int32 => int16: movl, movw
int32 => int8: movl, movb

int16 => int8: movzwl, movb

2. unsigned => unsigned

widden

uint8 => uint64: movzbl, movq
uint8 => uint32: movzbl, movl
uint8 => uint16: movzbl, movw

uint16 => uint64: movzwl, movq
uint16 => uint32: movzwl, movl

uint32 => uint64: movl, movq


narrow

uint64 => uint32: movq, movl
uint64 => uint16: movq, movw
uint64 => uint8: movq, movb

uint32 => uint16: movl, movw
uint32 => uint8: movl, movb

uint16 => uint8: movzwl, movb

3. signed => unsigned

widden

int8 => uint16: movsbw, movw
int8 => uint32: movsbl, movl
int8 => uint64: movsbq, movq

int16 => uint32: movswl, movl
int16 => uint64: movswq, movq

int32 => uint64: movl, cltq


narrow

int64 => uint8: movq, movb
int64 => uint16: movq, movw
int64 => uint32: movq, movl

int32 => uint8: movl, movb
int32 => uint16: movl, movw

int16 => uint8: movzwl, movb


equal

int8 => uint8: movzbl, movb
int16 => uint16: movzwl, movw
int32 => uint32: movl, movl
int64 => uint64: movq, movq

4. unsigned => signed

widden

uint8 => int16: movzbl, movw
uint8 => int32: movzbl, movl
uint8 => int64: movzbl, movq

uint16 => int32: movzwl, movl
uint16 => int64: movzwl, movq

uint32 => int64: movl, movq


narrow

uint64 => int8: movq, movb
uint64 => int16: movq, movw
uint64 => int32: movq, movl

uint32 => int8: movl, movb
uint32 => int16: movl, movw

uint16 => int8: movzwl, movb


equal

uint8 => int8: movzbl, movb
uint16 => int16: movzwl, movw
uint32 => int32: movl, movl
uint64 => int64: movq, movq