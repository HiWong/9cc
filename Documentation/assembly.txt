

X86_64 registers

General registers
==================

64-bit  32-bit  16-bit  8-bit
rax     eax     ax      al,ah
rbx     ebx     bx      bl,bh
rcx     ecx     cx      cl,ch
rdx     edx     dx      dl,dh
rbp     ebp     bp
rsp     esp     sp
rsi     esi     si
rdi     edi     di
rip     eip     ip
r8~r15

Segment registers
==================

cs,ds,es,fs,gs,ss

MOV instruction
================

1. MOV
mov + [b,w,l,q]

2. MOVSX/MOVSD: Move with Sign-Extension
MOVSX r16, r/m8      Move byte to word with sign-extension.
MOVSX r32, r/m8      Move byte to doubleword with sign-extension.
MOVSX r64, r/m8      Move byte to quadword with sign-extension.
MOVSX r32, r/m16     Move word to doubleword with sign-extension.
MOVSX r64, r/m16     Move word to quadword with sign-extension.
MOVSXD r64, r/m32    Move doubleword to quadword with sign-extension.

movs + [b,w,l][w,l,q]
movsbw
movsbl
movsbq
movswl
movswq
movslq
cltq (CDQE in Intel Manuals, shorthand for "movslq %eax, %rax")

3. MOVZX: Move with Zero-Extend
MOVZX r16, r/m8         Move byte to word with zero-extension.
MOVZX r32, r/m8         Move byte to doubleword, zero-extension.
MOVZX r64, r/m8         Move byte to quadword, zero-extension.
MOVZX r32, r/m16        Move word to doubleword, zero-extension.
MOVZX r64, r/m16        Move word to quadword, zero-extension.

movz + [b,w][w,l,q]
movzbw
movzbl
movzbq
movzwl
movzwq


Arithmetic Instructions
========================
1. ADD: x = y + z
   INTEGER ADD
   ADD AL, imm8         add imm8 to AL
   ADD AX, imm16        add imm16 to AX
   ADD EAX, imm32       add imm32 to EAX
   ADD RAX, imm32       add imm32 sign-extended to 64-bit to RAX

   ...

2. SUB: x = y - z
3. MUL: x = y * z
   INTEGER MUL
   3.1 unsigned mul
       MUL r/m8         multipy (AX <- AL * r/m8)
       MUL r/m16        multipy (DX:AX <- AX * r/m16)
       MUL r/m32        multipy (EDX:EAX <- EAX * r/m32)
       MUL r/m64        multipy (RDX:RAX <- RAX * r/m64)

   3.2 signed mul
       IMUL r/m8        AX <- AL * r/m8
       IMUL r/m16       DX:AX <- AX * r/m16
       IMUL r/m32       EDX:EAX <- EAX * r/m32
       IMUL r/m64       RDX:RAX <- RAX * r/m64

       IMUL r16, r/m16  word register <- word register * r/m16
       IMUL r32, r/m32  doubleword register <- doubleword register * r/m32
       IMUL r64, r/m64  quadword register <- quadword register * r/m64

       IMUL r16, r/m16, imm8     word register <- r/m16 * imm8
       IMUL r16, r/m16, imm16    word register <- r/m16 * imm16
       IMUL r32, r/m32, imm8     doubleword register <- r/m32 * imm8
       IMUL r32, r/m32, imm32    doubleword register <- r/m32 * imm32
       IMUL r64, r/m64, imm8     quadword register <- r/m64 * imm8
       IMUL r64, r/m64, imm32    quadword register <- r/m64 * imm32

   FLOATING MUL

4. DIV: x = y / z
   INTEGER DIV
   4.1 unsigned divide
       DIV r/m8         divide AX by r/m8, AL <- quotient, AH <- reminder
       DIV r/m16        divide DX:AX by r/m16, AX <- quotient, DX <- reminder
       DIV r/m32        divide EDX:EAX by r/m32, EAX <- quotient, EDX <- reminder
       DIV r/m64        divide RDX:RAX by r/m64, RAX <- quotient, RDX <- reminder

   4.2 signed divide
       IDIV r/m8         divide AX by r/m8, AL <- quotient, AH <- reminder
       IDIV r/m16        divide DX:AX by r/m16, AX <- quotient, DX <- reminder
       IDIV r/m32        divide EDX:EAX by r/m32, EAX <- quotient, EDX <- reminder
       IDIV r/m64        divide RDX:RAX by r/m64, RAX <- quotient, RDX <- reminder

   FLOATING DIV

5. MOD: x = y % z               (integer only)
   NOTE: the same as integer divide.
   
6. Bitwise-OR:  x = y | z       (integer only)
   OR r/m8, imm8
   OR r8, r/m8

   OR r/m16, imm8    
   OR r/m16, imm16
   OR r16, r/m16
   
   OR r/m32, imm8
   OR r/m32, imm32
   OR r32, r/m32

   OR r/m64, imm8
   OR r/m64, imm32
   OR r64, r/m64

7. Bitwise-AND: x = y & z       (integer only)


8. Bitwise-XOR: x = y ^ z       (integer only)


9. Left-SHIFT:   x = y << z     (integer only)
SAL: shift arithmetic left
SHL: shift logical left

NOTE: SAL and SHL are the same.

10. Right-SHIFT: x = y >> z     (integer only)

Shift: SAL/SAR/SHL/SHR
=======================

SAL: shift arithmetic left
SHL: shift logical left
SAR: shift arithmetic right
SHR: shift logical right

SHIFT [reg/mem], [imm8/cl]

1. SAL and SHL are the same.
2. SHR: fill with zeros
3. SAR: fill with ones


Jcc: Jump if Condition Is Met
==============================
1. JA: Jump if above (CF=0 and ZF=0)    >
   JA rel8           jump short
   JA rel16          jump near. Not supported in 64-bit mode.
   JA rel32          jump near

2. JAE: Jump if above or equal (CF=0)   >=
   JAE rel8           jump short
   JAE rel16          jump near. Not supported in 64-bit mode.
   JAE rel32          jump near

3. JNA: Jump if not above (CF=1 or ZF=1)        <=
   JNA rel8         jump short
   JNA rel16        jump near. Not supported in 64-bit mode.
   JNA rel32        jump near

4. JNAE: Jump if not above or equal (CF=1)      <
   JNAE rel8         jump short
   JNAE rel16        jump near. Not supported in 64-bit mode.
   JNAE rel32        jump near

5. JB: Jump if below (CF=1)                     <
   JB rel8              jump short
   JB rel16             jump near. Not supported in 64-bit mode.
   JB rel32             jump near

6. JBE: Jump if below or equal (CF=1 or ZF=1)   <=
   JBE rel8           jump short
   JBE rel16          jump near. Not supported in 64-bit mode.
   JBE rel32          jump near

7. JNB: Jump if not below (CF=0)        >=
   JNB rel8           jump short
   JNB rel16          jump near. Not supported in 64-bit mode.
   JNB rel32          jump near

8. JNBE: Jump if not below or equal (CF=0 and ZF=0)    >
   JNBE rel8           jump short
   JNBE rel16          jump near. Not supported in 64-bit mode.
   JNBE rel32          jump near

9. JG: Jump if greater (ZF=0 and SF=0F)         >
   JG rel8              jump short
   JG rel16             jump near. Not supported in 64-bit mode.
   JG rel32             jump near

10. JGE: Jump if greater or equal (SF=0F)       >=
   JGE rel8              jump short
   JGE rel16             jump near. Not supported in 64-bit mode.
   JGE rel32             jump near

11. JNG: Jump if not greater (ZF=1 or SF!=0F)   <=
   JNG rel8              jump short
   JNG rel16             jump near. Not supported in 64-bit mode.
   JNG rel32             jump near

12. JNGE: Jump if not greater or equal (SF!=0F) <
   JNGE rel8              jump short
   JNGE rel16             jump near. Not supported in 64-bit mode.
   JNGE rel32             jump near

13. JL: Jump if less (SF!=0F)  <
   JL rel8              jump short
   JL rel16             jump near. Not supported in 64-bit mode.
   JL rel32             jump near

14. JLE: Jump if less or equal (ZF=1 or SF!=0F)   <=
   JLE rel8              jump short
   JLE rel16             jump near. Not supported in 64-bit mode.
   JLE rel32             jump near

15. JNL: Jump if not less (SF=0F)       >=
   JNL rel8              jump short
   JNL rel16             jump near. Not supported in 64-bit mode.
   JNL rel32             jump near

16. JNLE: Jump if not less or equal (ZF=0 and SF=0F)         >
   JNLE rel8              jump short
   JNLE rel16             jump near. Not supported in 64-bit mode.
   JNLE rel32             jump near

17. JE: Jump if equal (ZF=1)             ==
    JE rel8           jump short
    JE rel16          jump near. Not supported in 64-bit mode.
    JE rel32          jump near

18. JNE: Jump if not equal (ZF=0)       !=
    JNE rel8           jump short
    JNE rel16          jump near. Not supported in 64-bit mode.
    JNE rel32          jump near

19. JZ: Jump if zero (ZF=1)             == 0
    JZ rel8           jump short
    JZ rel16          jump near. Not supported in 64-bit mode.
    JZ rel32          jump near

20. JNZ: Jump if not zero (ZF=0)        != 0
    JNZ rel8           jump short
    JNZ rel16          jump near. Not supported in 64-bit mode.
    JNZ rel32          jump near

----------------------------------------
NOTE:
(Unsigned)
JA, JNBE: >             (CF=0 and ZF=0)
JAE, JNB: >=            (CF=0)
JB, JNAE: <             (CF=1)
JBE, JNA: <=            (CF=1 or ZF=1)

(Signed)
JG, JNLE: >             (ZF=0 and SF=0F)
JGE, JNL: >=            (SF=0F)
JL, JNGE: <             (SF!=0F)
JLE, JNG: <=            (ZF=1 or SF!=0F)

JE, JZ:   ==, ==0       (ZF=1)
JNE, JNZ: !=, !=0       (ZF=0)
-----------------------------------------

21. JC: Jump if carry (CF=1)
    JC rel8           jump short
    JC rel16          jump near. Not supported in 64-bit mode.
    JC rel32          jump near

22. JNC: Jump if not carry (CF=0)
    JNC rel8           jump short
    JNC rel16          jump near. Not supported in 64-bit mode.
    JNC rel32          jump near

23. JO: Jump if overflow (OF=1)
    JO rel8           jump short
    JO rel16          jump near. Not supported in 64-bit mode.
    JO rel32          jump near

24. JNO: Jump if not overflow (OF=0)
    JNO rel8           jump short
    JNO rel16          jump near. Not supported in 64-bit mode.
    JNO rel32          jump near

25. JP: Jump if parity (PF=1)
    JP rel8           jump short
    JP rel16          jump near. Not supported in 64-bit mode.
    JP rel32          jump near

26. JNP: Jump if not parity (PF=0)
    JNP rel8           jump short
    JNP rel16          jump near. Not supported in 64-bit mode.
    JNP rel32          jump near

27. JS: Jump if sign (SF=1)
    JS rel8           jump short
    JS rel16          jump near. Not supported in 64-bit mode.
    JS rel32          jump near

28. JNS: Jump if not sign (SF=0)
    JNS rel8           jump short
    JNS rel16          jump near. Not supported in 64-bit mode.
    JNS rel32          jump near

29. JPE: Jump if parity even (PF=1)
    JPE rel8           jump short
    JPE rel16          jump near. Not supported in 64-bit mode.
    JPE rel32          jump near

30. JPO: Jump if parity odd (PF=0)
    JPO rel8           jump short
    JPO rel16          jump near. Not supported in 64-bit mode.
    JPO rel32          jump near


x86-64 Addessing Model
========================

section:[base + index*scale + disp]
section:disp(base, index, scale)

disp(rip)
sym(rip)
sym(,index,scale)

1. https://sourceware.org/binutils/docs/as/i386_002dMemory.html#i386_002dMemory
2. http://www.x86-64.org/documentation/assembly.html

Reference
===========

1. Intel 64 and IA-32 Architecture Software Developer Manuals:
http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html

2. Using as:
https://sourceware.org/binutils/docs/as/

3. ASM64 Handout:
https://www.cs.cmu.edu/~fp/courses/15213-s07/misc/asm64-handout.pdf
