
词法分析器的设计
=================

Buffer
-------

+-------------+-+---------------------+-+
|   LBUFSIZE  | |       RBUFSIZE      | |
+-------------+-+---------------------+-+

当 RBuffer 剩余的字符数小于 MINLEN (<LBUFSIZE) 时，会将其 copy 到 LBuffer，（以末尾对齐），并从输入中读取新文本到 RBuffer，因此两部分内容衔接。

除了 MINLEN 必须小于 LBUFSIZE 之外，并无其他限制，LBUSIZE/RBUFZISE 可以为任意大小。

使用 换行符 '\n' 作为 Buffer 末尾标记，因此每当遇到 '\n' 时必须判断是文本中的 '\n' 还是 末尾标记。


Lexcical elements
-------------------

1. keywords

2~10个字符组成 (do, if, ..., 最长的是 _Imaginary)

进度：100%

2. identifiers

不限制长度。（需要重新拼接字符串）

进度：100%

3. operators and separators

1~3个字符组成 (> ; ... <= != && >== etc.)

4. constants

整数：

浮点数：

字符：

字符串：


5. comments

// 开头的省略到行结束
/* */  省略整块被包围文本，不能嵌套 (C standard)

进度：100%


语法分析器的设计
=================

自顶向下分析

cdecl

translation-unit:
    external-declaration
    translation-unit    external-declaration
    
external-declaration:
    declaration
    function-definition
    
function-definition:
    declaration-specifier  declarator  declaration-list(opt)  compound-statement
    
declaration-list:
    declaration
    declaration-list	declaration
    
declaration:
    declaration-specifier   init-declarator-list ;
    
init-declarator-list:
    init-declarator
    init-declarator-list  ,  init-declarator
    
init-declarator:
    declarator
    declarator  =  initializer


函数定义的两种格式：

老格式：(traditional form)

int f(i, j) int i; int j; { ... }

原型格式：(prototype form)

int f(int i, int j) { ... }


词法分析
语法分析
语义分析
