// ASCII
// id    name     kind
_a(TOK0, NULL,    0)
_a(TOK1, "001",   0)
_a(TOK2, "002",   0)
_a(TOK3, "003",   0)
_a(TOK4, "004",   0)
_a(TOK5, "005",   0)
_a(TOK6, "006",   0)
_a(TOK7,  "\a",   0)
_a(TOK8,  "\b",   0)
_a(TOK9,  "\t",   0)
_a(TOK10, "\n",   0)
_a(TOK11, "\v",   0)
_a(TOK12, "\f",   0)
_a(TOK13, "\r",   0)
_a(TOK14, "016",  0)
_a(TOK15, "017",  0)
_a(TOK16, "020",  0)
_a(TOK17, "021",  0)
_a(TOK18, "022",  0)
_a(TOK19, "023",  0)
_a(TOK20, "024",  0)
_a(TOK21, "025",  0)
_a(TOK22, "026",  0)
_a(TOK23, "027",  0)
_a(TOK24, "030",  0)
_a(TOK25, "031",  0)
_a(TOK26, "032",  0)
_a(TOK27, "033",  0)
_a(TOK28, "034",  0)
_a(TOK29, "035",  0)
_a(TOK30, "036",  0)
_a(TOK31, "037",  0)
_a(TOK32, " ",    0)
_a(TOK33, "!",    ID)
_a(TOK34, "\"",   0)
_a(TOK35, "#",    0)
_a(TOK36, "$",    0)
_a(TOK37, "%",    '%')
_a(TOK38, "&",    ID)
_a(TOK39, "'",    0)
_a(TOK40, "(",    ID)
_a(TOK41, ")",    ')')
_a(TOK42, "*",    ID)
_a(TOK43, "+",    ID)
_a(TOK44, ",",    ',')
_a(TOK45, "-",    ID)
_a(TOK46, ".",    '.')
_a(TOK47, "/",    '/')
_a(TOK48, "0",    0)
_a(TOK49, "1",    0)
_a(TOK50, "2",    0)
_a(TOK51, "3",    0)
_a(TOK52, "4",    0)
_a(TOK53, "5",    0)
_a(TOK54, "6",    0)
_a(TOK55, "7",    0)
_a(TOK56, "8",    0)
_a(TOK57, "9",    0)
_a(TOK58, ":",    ':')
_a(TOK59, ";",    IF)
_a(TOK60, "<",    '<')
_a(TOK61, "=",    '=')
_a(TOK62, ">",    '>')
_a(TOK63, "?",    '?')
_a(TOK64, "@",    0)
_a(TOK65, "A",    0)
_a(TOK66, "B",    0)
_a(TOK67, "C",    0)
_a(TOK68, "D",    0)
_a(TOK69, "E",    0)
_a(TOK70, "F",    0)
_a(TOK71, "G",    0)
_a(TOK72, "H",    0)
_a(TOK73, "I",    0)
_a(TOK74, "J",    0)
_a(TOK75, "K",    0)
_a(TOK76, "L",    0)
_a(TOK77, "M",    0)
_a(TOK78, "N",    0)
_a(TOK79, "O",    0)
_a(TOK80, "P",    0)
_a(TOK81, "Q",    0)
_a(TOK82, "R",    0)
_a(TOK83, "S",    0)
_a(TOK84, "T",    0)
_a(TOK85, "U",    0)
_a(TOK86, "V",    0)
_a(TOK87, "W",    0)
_a(TOK88, "X",    0)
_a(TOK89, "Y",    0)
_a(TOK90, "Z",    0)
_a(TOK91, "[",    '[')
_a(TOK92, "\\",   0)
_a(TOK93, "]",    ']')
_a(TOK94, "^",    '^')
_a(TOK95, "_",    0)
_a(TOK96, "`",    0)
_a(TOK97, "a",    0)
_a(TOK98, "b",    0)
_a(TOK99, "c",    0)
_a(TOK100, "d",   0)
_a(TOK101, "e",   0)
_a(TOK102, "f",   0)
_a(TOK103, "g",   0)
_a(TOK104, "h",   0)
_a(TOK105, "i",   0)
_a(TOK106, "j",   0)
_a(TOK107, "k",   0)
_a(TOK108, "l",   0)
_a(TOK109, "m",   0)
_a(TOK110, "n",   0)
_a(TOK111, "o",   0)
_a(TOK112, "p",   0)
_a(TOK113, "q",   0)
_a(TOK114, "r",   0)
_a(TOK115, "s",   0)
_a(TOK116, "t",   0)
_a(TOK117, "u",   0)
_a(TOK118, "v",   0)
_a(TOK119, "w",   0)
_a(TOK120, "x",   0)
_a(TOK121, "y",   0)
_a(TOK122, "z",   0)
_a(TOK123, "{",   IF)
_a(TOK124, "|",   '|')
_a(TOK125, "}",   '}')
_a(TOK126, "~",   ID)
_a(TOK127, "0177",  0)

// id           name           kind
_x(ID,          "identifier",  ID,   256)
_t(ICONSTANT,   "ICONSTANT",   ID)
_t(FCONSTANT,   "FCONSTANT",   ID)
_t(SCONSTANT,   "SCONSTANT",   ID)

// keywords		       

_k(AUTO,        "auto",        STATIC)
_k(BREAK,       "break",       IF)
_k(CASE,        "case",        IF)
_k(_COMPLEX,    "_Complex",    INT)
_k(CONTINUE,    "continue",    IF)
_k(DEFAULT,     "default",     IF)
_k(DO,          "do",          IF)
_k(ELSE,        "else",        0)
_k(EXTERN,      "extern",      STATIC)
_k(FOR,         "for",         IF)
_k(GOTO,        "goto",        IF)
_k(IF,          "if",          IF)
_k(_IMAGINARY,  "_Imaginary",  INT)
_k(REGISTER,    "register",    STATIC)
_k(RETURN,      "return",      IF)
_k(SIZEOF,      "sizeof",      ID)
_k(STATIC,      "static",      STATIC)
_k(SIGNED,      "signed",      INT)
_k(SWITCH,      "switch",      IF)
_k(TYPEDEF,     "typedef",     STATIC)
_k(WHILE,       "while",       IF)

// type op && kind
_t(ELLIPSIS,    "...",         ELLIPSIS)
_k(VOID,        "void",        INT)
_k(ENUM,        "enum",        INT)
_k(STRUCT,      "struct",      INT)
_k(UNION,       "union",       INT)
_k(_BOOL,       "_Bool",       INT)
_k(CHAR,        "char",        INT)
_k(SHORT,       "short",       INT)
_k(INT,         "int",         INT)
_k(UNSIGNED,    "unsigned",    INT)
_k(FLOAT,       "float",       INT)
_k(DOUBLE,      "double",      INT)
_k(LONG,        "long",        INT)

// qualifiers
_k(CONST,       "const",       CONST)
_k(RESTRICT,    "restrict",    CONST)
_k(VOLATILE,    "volatile",    CONST)

// func specifier
_k(INLINE,      "inline",      INT)

// operators

// assign op begin
_t(MULEQ,       "*=",          0)
_t(ADDEQ,       "+=",          0)
_t(MINUSEQ,     "-=",          0)
_t(DIVEQ,       "/=",          0)
_t(MODEQ,       "%=",          0)
_t(XOREQ,       "^=",          XOREQ)
_t(BANDEQ,      "&=",          BANDEQ)
_t(BOREQ,       "|=",          BOREQ)
_t(LSHIFTEQ,    "<<=",         LSHIFTEQ)
_t(RSHIFTEQ,    ">>=",         RSHIFTEQ)
// assign op end

_t(LEQ,         "<=",          LEQ)
_t(LSHIFT,      "<<",          LSHIFT)
_t(GEQ,         ">=",          GEQ)
_t(RSHIFT,      ">>",          RSHIFT)

_t(INCR,        "++",          ID)
_t(DECR,        "--",          ID)
_t(DEREF,       "->",          DEREF)
_t(EQ,          "==",          EQ)
_t(NEQ,         "!=",          NEQ)

_t(AND,         "&&",          AND)
_t(OR,          "||",          OR)

_t(SHARPSHARP,  "##",	       0)
_t(LINENO,      "line",        0)

// op			       
_t(ARRAY,       "array",       0)
_t(FUNCTION,    "function",    0)
_t(POINTER,     "pointer",     0)

// preprocess
_t(IFDEF,	"ifdef",	0)
_t(IFNDEF,	"ifndef",	0)

// EOI
_t(EOI,		"EOI",		0)

#undef _k
#undef _t
#undef _x
#undef _a
