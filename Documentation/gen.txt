// doc for generator

scan all tacs, scan all symbols:

divide into 4 kinds according to the address type:

1. global: in memory (gvar, gfunc, static, float literal)

2. stack: in stack (local var)

3. tmp: in register

4. literal: integer literal

every symbol has 4 slots for addrs:
0: immediate
1: memory
2: stack
3: register

every register holds variables:
{
symbol;
size; // for spill
}

//////
operand
==============
sym
disp(sym,index,scale)
*sym


assignment
==============
x = y

NOTE:
mem = tmp
mem = imm

// move directly

tmp = mem
tmp = tmp
tmp = imm

// get regs in y as Rys
// alloc reg for tmp as Rx (except: Rys)
// move y to Rx


integer bop
==============
x = y op z (where x is a tmp operand)

get regs in y as Rys
get regs in z as Rzs
dispatch reg for x as Rx (except: Rys + Rzs)
[load x to Rx descriptor]
emit (mov y Rx)
emit (op z Rx)
